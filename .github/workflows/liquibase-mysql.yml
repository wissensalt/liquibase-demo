name: MySQL DB Migration

on:
  # Manual trigger with operation and environment selection
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      operation:
        description: 'Liquibase operation to perform'
        required: true
        default: 'status'
        type: choice
        options:
          - migrate
          - rollback
          - status
          - history
          - clear
      rollback_count:
        description: 'Number of changesets to rollback (only for rollback operation)'
        required: false
        default: '1'

  # Automatic migration on push to main/master branch (defaults to staging)
  push:
    branches: [ main, master ]
    paths:
      - 'changelogs/**'
      - 'liquibase.properties'
      - 'drivers/**'

  # Automatic migration on pull request (defaults to staging)
  pull_request:
    branches: [ main, master ]
    paths:
      - 'changelogs/**'
      - 'liquibase.properties'
      - 'drivers/**'

env:
  VERSION: '5.0.0'
  EDITION: 'oss'
  SELECTED_ENV: ${{ github.event.inputs.environment || 'staging' }}
  DB_HOST: ${{ (github.event.inputs.environment == 'production' && secrets.PROD_DB_HOST) || secrets.STAGING_DB_HOST }}
  DB_PORT: ${{ (github.event.inputs.environment == 'production' && (secrets.PROD_DB_PORT || '3306')) || (secrets.STAGING_DB_PORT || '3306') }}
  DB_NAME: ${{ (github.event.inputs.environment == 'production' && secrets.PROD_DB_NAME) || secrets.STAGING_DB_NAME }}
  DB_USERNAME: ${{ (github.event.inputs.environment == 'production' && secrets.PROD_DB_USERNAME) || secrets.STAGING_DB_USERNAME }}
  DB_PASSWORD: ${{ (github.event.inputs.environment == 'production' && secrets.PROD_DB_PASSWORD) || secrets.STAGING_DB_PASSWORD }}

jobs:
  database-health-check:
    runs-on: ubuntu-latest
    name: Database Health Check - ${{ github.event.inputs.environment }}
    steps:
      - &checkout_step
        name: Checkout code
        uses: actions/checkout@v4
      - &create_props_step
        name: Create secure liquibase.properties
        run: |
          echo "Preparing liquibase.properties for environment: ${{ env.SELECTED_ENV }}"
          cat > liquibase.properties << EOF
          # Auto-generated for environment: ${{ env.SELECTED_ENV }}
          url=jdbc:mysql://${{ env.DB_HOST }}:${{ env.DB_PORT }}/${{ env.DB_NAME }}
          username=${{ env.DB_USERNAME }}
          password=${{ env.DB_PASSWORD }}
          driver=com.mysql.cj.jdbc.Driver
          changeLogFile=changelogs/changelog-root.yaml
          classpath=drivers/mysql-connector-j-9.4.0.jar
          logLevel=info
          EOF
          echo 'Generated liquibase.properties:'
          cat liquibase.properties
      - &setup_liquibase_step
        name: Setup Liquibase
        uses: liquibase/setup-liquibase@v2.0.0
        with:
          version: ${{ env.VERSION }}
          edition: ${{ env.EDITION }}
      - name: Database connectivity test
        run: |
          echo "Testing database connectivity ${{ env.SELECTED_ENV }}..."
          timeout 30s liquibase status || {
            echo "Database connection failed or timed out"; exit 1; }
      - name: Check database locks
        run: |
          echo "Checking for database locks ${{ env.SELECTED_ENV }}..."
          mysql -h ${{ env.DB_HOST }} -P ${{ env.DB_PORT }} -u ${{ env.DB_USERNAME }} -p${{ env.DB_PASSWORD }} ${{ env.DB_NAME }} -e "SELECT * FROM DATABASECHANGELOGLOCK;" || echo "No lock table found or accessible"

  liquibase-operation:
    runs-on: ubuntu-latest
    name: Liquibase ${{ github.event.inputs.operation || 'status' }} - ${{ github.event.inputs.environment }}
    needs: database-health-check
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && contains(fromJson('["main","master"]'), github.ref_name))
    steps:
      - *checkout_step
      - *create_props_step
      - *setup_liquibase_step
      - name: Validate connection
        run: |
          echo "Testing database connection ${{ env.SELECTED_ENV }}"
          liquibase status --verbose
      - name: Execute Liquibase Operation
        run: |
          set -e
          OPERATION="${{ github.event.inputs.operation || 'migrate' }}"
          echo "Executing operation '$OPERATION' on environment ${{ env.SELECTED_ENV }}"
          case "$OPERATION" in
            migrate)
              liquibase update;;
            rollback)
              COUNT="${{ github.event.inputs.rollback_count || '1' }}"; liquibase rollbackCount $COUNT;;
            status)
              liquibase status --verbose;;
            history)
              liquibase history;;
            clear)
              liquibase clearCheckSums;;
            *)
              echo "Unknown operation: $OPERATION"; exit 1;;
          esac
      - name: Post-operation status
        if: always()
        run: |
          echo "Final database status ${{ env.SELECTED_ENV }}"
          liquibase status

  liquibase-validate:
    runs-on: ubuntu-latest
    name: Validate Liquibase Changes - ENV ${{ github.event.inputs.environment }}
    needs: database-health-check
    if: github.event_name == 'pull_request'
    steps:
      - *checkout_step
      - *create_props_step
      - *setup_liquibase_step
      - name: Validate changelog syntax
        run: liquibase validate
      - name: Check pending changes
        run: liquibase status --verbose
      - name: Generate update SQL (dry-run)
        run: |
            liquibase updateSQL > migration-preview.sql
            echo "SQL Preview:" && cat migration-preview.sql
      - name: Upload SQL Preview
        uses: actions/upload-artifact@v4
        with:
          name: migration-preview-sql
          path: migration-preview.sql
          retention-days: 30
